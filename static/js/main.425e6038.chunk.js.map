{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["shuffle","array","randomArray","i","length","j","Math","floor","random","result","TodoList","state","completedTodos","title","randomTodos","todos","filter","todo","completed","handleChange","event","target","name","value","setState","handleRandomizer","props","this","isRandom","preparedTodos","className","placeholder","onChange","type","onClick","includes","map","key","id","classNames","checked","readOnly","disabled","userId","selectedUserId","onSelectUser","React","Component","defaultProps","PropTypes","arrayOf","shape","request","url","fetch","then","responce","ok","Error","status","statusText","json","data","getTodos","CurrentUser","user","loadData","prevProps","a","email","phone","clearSelectedUser","App","ReactDOM","render","document","getElementById"],"mappings":"8aAKMA,EAAU,SAACC,GAKf,IAHA,IAAMC,EAAcD,EAChBE,EAAID,EAAYE,OAAS,EAEtBD,GAAG,CAER,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAASP,EAAYC,GAC3BD,EAAYC,GAAKD,EAAYG,GAC7BH,EAAYG,GAAKI,EACjBN,MAISO,EAAb,4MACEC,MAAQ,CACNC,eAAgB,MAChBC,MAAO,GACPC,YAAa,IAJjB,EAOEF,eAAiB,SAACG,GAChB,OAAQ,EAAKJ,MAAMC,gBACjB,IAAK,SACH,OAAOG,EAAMC,QAAO,SAAAC,GAAI,OAAKA,EAAKC,aACpC,IAAK,YACH,OAAOH,EAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,aACnC,QACE,OAAOH,IAdf,EAkBEI,aAAe,SAACC,GACd,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,EAAKC,SAAL,eACGF,EAAOC,KAtBd,EA0BEE,iBAAmB,WACjB,IAAQV,EAAU,EAAKW,MAAfX,MAER,EAAKS,SAAS,CAAEV,YAAad,EAAQe,MA7BzC,4CAgCE,WAAU,IAAD,OACCA,EAAUY,KAAKD,MAAfX,MACR,EAA4CY,KAAKhB,MAAzCE,EAAR,EAAQA,MAAOD,EAAf,EAAeA,eAAgBgB,EAA/B,EAA+BA,SAE3BC,EAAgBF,KAAKf,eAAL,YAAwBG,IAM5C,OAJIa,IACFC,EAAgBF,KAAK3B,QAAQ6B,IAI7B,yBAAKC,UAAU,YACb,sCACA,2BACER,KAAK,QACLS,YAAY,mBACZR,MAAOV,EACPmB,SAAUL,KAAKR,eAEjB,4BACEI,MAAOX,EACPU,KAAK,iBACLU,SAAUL,KAAKR,cAEf,uCACA,6CACA,2CAEF,4BACEc,KAAK,SACLH,UAAU,SACVI,QAASP,KAAKF,kBAHhB,aAOA,yBAAKK,UAAU,4BACb,wBAAIA,UAAU,kBACXD,EACEb,QAAO,SAAAC,GAAI,OAAIA,EAAKJ,OACfI,EAAKJ,MAAOsB,SAAStB,MAC1BuB,KAAI,SAAAnB,GAAI,OACP,wBACEoB,IAAKpB,EAAKqB,GACVR,UAAWS,IAAW,iBAAkB,CACtC,0BAA2BtB,EAAKC,UAChC,6BAA8BD,EAAKC,aAIrC,+BACGD,EAAKC,UACJ,2BAAOe,KAAK,WAAWO,SAAO,EAACC,UAAQ,IAEvC,2BAAOR,KAAK,WAAWS,UAAQ,IAGjC,2BAAIzB,EAAKJ,QAEX,4BACEiB,UAAWS,IAAW,+BAAgC,CAEpD,kCAAmCtB,EAAK0B,SAAW,EAAKjB,MAAMkB,iBAEhEX,KAAK,SACLC,QAAS,WACP,EAAKR,MAAMmB,aAAa5B,EAAK0B,UAPjC,SAWG1B,EAAK0B,mBArG1B,GAA8BG,IAAMC,WAiHpCrC,EAASsC,aAAe,CACtBjC,MAAOkC,IAAUC,QAAQD,IAAUE,MAAM,CACvCR,OAAQ,EACR9B,MAAO,GACPK,WAAW,KAEb0B,eAAgB,G,UCzIZQ,EAAU,SAAAC,GAAG,OAAIC,MAAM,GAAD,OAFf,mCAEe,OAAcD,IACvCE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UAEjBN,MAAK,SAAA9C,GAAM,OAAIA,EAAOqD,SAEZC,EAAW,kBAAMX,EAAQ,YCPzBY,EAAb,4MACErD,MAAQ,CACNsD,KAAM,IAFV,uDAKE,WACEtC,KAAKuC,aANT,gCASE,SAAmBC,GACbA,EAAUxB,SAAWhB,KAAKD,MAAMiB,QAClChB,KAAKuC,aAXX,6DAeE,4BAAAE,EAAA,sEDNqBzB,ECOQhB,KAAKD,MAAMiB,ODPTS,EAAQ,WAAD,OAAYT,ICMlD,OACQsB,EADR,OAGEtC,KAAKH,SAAS,CAAEyC,SAHlB,iCDNqB,IAAAtB,ICMrB,YAfF,0EAqBE,WACE,MAAmChB,KAAKhB,MAAMsD,KAAtC3B,EAAR,EAAQA,GAAIhB,EAAZ,EAAYA,KAAM+C,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,MAEzB,OACE,yBAAKxC,UAAU,eACb,wBAAIA,UAAU,sBACZ,uDACqBQ,KAIvB,wBAAIR,UAAU,qBAAqBR,GACnC,uBAAGQ,UAAU,sBAAsBuC,GACnC,uBAAGvC,UAAU,sBAAsBwC,GAEnC,4BACErC,KAAK,SACLH,UAAU,2BACVI,QAASP,KAAKD,MAAM6C,mBAHtB,cApCR,GAAiCzB,IAAMC,WC0DxByB,E,4MAvDb7D,MAAQ,CACNI,MAAO,GACP6B,eAAgB,G,EAOlBsB,S,sBAAW,4BAAAE,EAAA,sEACWL,IADX,OACHhD,EADG,OAGT,EAAKS,SAAS,CAAET,UAHP,2C,EAMX8B,aAAe,SAACF,GACd,EAAKnB,SAAS,CACZoB,eAAgBD,K,EAIpB4B,kBAAoB,WAClB,EAAK/C,SAAS,CACZoB,eAAgB,K,uDAlBpB,WACEjB,KAAKuC,a,oBAqBP,WACE,MAAkCvC,KAAKhB,MAA/BI,EAAR,EAAQA,MAAO6B,EAAf,EAAeA,eAEf,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEf,MAAOA,EACP8B,aAAclB,KAAKkB,aACnBD,eAAgBA,KAIpB,yBAAKd,UAAU,gBACb,yBAAKA,UAAU,0BACZc,EACC,kBAAC,EAAD,CACED,OAAQC,EACR2B,kBAAmB5C,KAAK4C,oBAExB,0B,GAhDEzB,IAAMC,WCHxB0B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.425e6038.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst shuffle = (array) => {\n\n  const randomArray = array;\n  let i = randomArray.length - 1;\n\n  while (i) {\n    // eslint-disable-next-line\n    const j = Math.floor(Math.random() * i);\n    const result = randomArray[i];\n    randomArray[i] = randomArray[j];\n    randomArray[j] = result;\n    i--;\n  }\n}\n\nexport class TodoList extends React.Component {\n  state = {\n    completedTodos: 'All',\n    title: '',\n    randomTodos: [],\n  };\n\n  completedTodos = (todos) => {\n    switch (this.state.completedTodos) {\n      case 'Active':\n        return todos.filter(todo => !todo.completed);\n      case 'Completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleRandomizer = () => {\n    const { todos } = this.props;\n\n    this.setState({ randomTodos: shuffle(todos) });\n  }\n\n  render() {\n    const { todos } = this.props;\n    const { title, completedTodos, isRandom } = this.state;\n\n    let preparedTodos = this.completedTodos([...todos]);\n\n    if (isRandom) {\n      preparedTodos = this.shuffle(preparedTodos);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          name=\"title\"\n          placeholder=\"Enter todo title\"\n          value={title}\n          onChange={this.handleChange}\n        />\n        <select\n          value={completedTodos}\n          name=\"completedTodos\"\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Completed</option>\n          <option>Active</option>\n        </select>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={this.handleRandomizer}\n        >\n          Randomize\n        </button>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos\n              .filter(todo => todo.title\n                && (todo.title).includes(title))\n              .map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames('TodoList__item', {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  })\n                  }\n                >\n                  <label>\n                    {todo.completed ? (\n                      <input type=\"checkbox\" checked readOnly />\n                    ) : (\n                      <input type=\"checkbox\" disabled />\n                    )}\n\n                    <p>{todo.title}</p>\n                  </label>\n                  <button\n                    className={classNames('button TodoList__user-button', {\n                      // eslint-disable-next-line\n                      'TodoList__user-button--selected': todo.userId === this.props.selectedUserId,\n                    })}\n                    type=\"button\"\n                    onClick={() => {\n                      this.props.onSelectUser(todo.userId);\n                    }}\n                  >\n                    User #\n                    {todo.userId}\n                  </button>\n                </li>\n              ))}\n\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.defaultProps = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    userId: 0,\n    title: '',\n    completed: false,\n  })),\n  selectedUserId: 0,\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ).isRequired,\n  onSelectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number,\n};\n","const API_URL = `https://mate-api.herokuapp.com/`;\n\nconst request = url => fetch(`${API_URL}${url}`)\n  .then((responce) => {\n    if (!responce.ok) {\n      throw new Error(`${responce.status} - ${responce.statusText}`);\n    }\n\n    return responce.json();\n  })\n  .then(result => result.data);\n\nexport const getTodos = () => request('./todos');\nexport const getUsers = () => request('./users');\nexport const getUser = userId => request(`./users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <div className=\"currentUser\">\n        <h2 className=\"currentUser__title\">\n          <span>\n            {`Selectet user: ${id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"currentUser__name\">{name}</h3>\n        <p className=\"currentUser__email\">{email}</p>\n        <p className=\"currentUser__phone\">{phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"currentUser__clearButton\"\n          onClick={this.props.clearSelectedUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  loadData = async() => {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  onSelectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelectUser={this.onSelectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}